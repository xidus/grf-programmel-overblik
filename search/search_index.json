{"config":{"lang":["da"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Programmel-overblik","text":"<p>Kontorets egenudviklede programmel b\u00f8r f\u00f8lge f\u00e6lles retningslinjer for bedste praksis i forhold til software-udvikling. Den overordnede vision for ethvert projekt b\u00f8r v\u00e6re en tilstand, hvor programmel og dokumentation heraf er fremtidssikret. N\u00e5r det er fremtidssikret, vil det eksempelvis til alle tider vil v\u00e6re muligt for nye personer p\u00e5 et givet projekt at komme nemt igang og forts\u00e6tte, hvor andre slap. Generelt set, vil der v\u00e6re strukturer p\u00e5 plads, som sikrer, at det p\u00e5g\u00e6ldende programmel kan bruges i fremtiden uden adgang til andet end koden, dokumentation samt historik heraf.</p> <p>God praksis kan og b\u00f8r belyses fra flere synsvinkler. Der vil altid v\u00e6re tekniske krav, som eksempelvis kr\u00e6ver overvejelser om software-arkitektur, teknisk infrastruktur eller programmeringskonventioner. Fra den formelle synsvinkel har vi krav til, at et givet projekt er veldokumenteret, at kode og dokumentation har den rigtige licens, at de enkelte dele af projektet er tilg\u00e6ngelige for dem, der skal kunne tilg\u00e5 dem.</p> <p>Kategorierne har gradvis flere krav til til det udviklede programmel. N\u00e5r et stykke programmel bliver placeret i en kategori, stiller vi samtidig specifikke krav til, hvad der skal indg\u00e5 i projektet. Vi kan sp\u00f8rge os selv, hvor modent et projekts programmel er, ved at se p\u00e5, hvor mange af kravene inden for kategorien, der er opfyldt.</p> <p>Indplaceringen s\u00e6tter alts\u00e5 et m\u00e5l for, hvorn\u00e5r et projekts programmel er modent nok til fortsat udvikling eller f\u00e6rdigt. N\u00e5r et projekts programmel opfylder alle kravene i kategorien, vil vi sige, at det er tilpas fremtidssikret i ovenn\u00e6vnte forstand.</p> <p>Kategori-inddelingen foruds\u00e6tter, at det p\u00e5g\u00e6ldende programmel har et v\u00e6rdiskabende form\u00e5l for forretningen. Det er med andre ord en antagelse, at det p\u00e5g\u00e6ldende programmel b\u00f8r eksistere.</p> <p>Inddelingen er alts\u00e5 fastsat ud fra den nuv\u00e6rende, eksisterende programmel-portef\u00f8lje, og kravene er valgt ud fra generel bedste praksis i resten af industrien. Kravene i hver kategori kan derfor \u00e6ndre sig afh\u00e6ngigt af b\u00e5de vores egne behov, men ogs\u00e5 som en naturlig del af den teknologiske og styringsm\u00e6ssige tendens, vi ser omkring os. Derfor er dette dokument n\u00f8dvendigvis ogs\u00e5 en midlertidig rettesnor, som i sig selv skal fremtidssikres efter bedste praksis.</p> <p>Nedenfor kommer et kort overblik over de enkelte kategorier med links til skabeloner. Dette efterf\u00f8lges af et afsnit for hver skabelons, hvor de enkelte krav til leverancen beskrives.</p>"},{"location":"#kategorier","title":"Kategorier","text":"<p>Inddelingen i kategorier er til for at skabe en klar ramme for forventningerne til et givet projekts leverance. Kategorierne har forskellige krav afh\u00e6ngig af deres kritikalitet og form\u00e5l for forretningen.</p> <p>De enkelte kategorier d\u00e6kker f\u00f8lgende krav:</p> Krav Prototype Produktion Distribution README-fil x x x Licens x x x <code>.gitignore</code> x x x Git-arkiv p\u00e5 GitHub x x x Brugervejledning x x x Installationsvejledning x x x Konfigurationsfiler x x x Teknisk dokumentation x x Test suite x x Continuous Integration [CI] x x Semantisk versionering x x Vedligeholdelsesspor x x API-dokumentation x Systemafh\u00e6ngigheder x Continuous Delivery/Deployment [CD] x <p>Ud fra tabellen kan man se, at kravene til et projekts programmel bliver flere med hver kategori. Kravene i kategorien Prototype er indeholdt i den efterf\u00f8lgende kategori Produktion og denne kategoris krav er igen inkluderet i den sidste kategori Distribution.</p> <p>Derfor vil en opfyldelse af alle krav i kategorien Produktion medf\u00f8re, at man opfylder alle krav stillet til programmel i kategorien Prototype. P\u00e5 samme m\u00e5de vil en im\u00f8dekommelse af alle krav til programmel i kategorien Distribution samtidig betyde, at man opfylder alle krav i de to underliggende kategorier Produktion og Prototype.</p> <p>Ovenst\u00e5ende er illustreret i f\u00f8lgende figur, der samtidig viser, at der er en ubegr\u00e6nset m\u00e6ngde krav uden for de tre inddelinger, vi har valgt til vores form\u00e5l lige nu.</p> <p></p>"},{"location":"#modtagere","title":"Modtagere","text":"<p>F\u00e6lles for alle arkiverne er, at der overordnet er mindst to modtagere af leverancen: udviklere (herunder de oprindelige forfattere), og brugere (kollegaen, den interne partner, 'kunden'). Modtagerne adskiller sig prim\u00e6rt ved deres forskellige form\u00e5l med at tilg\u00e5 arkivets indhold, og i forl\u00e6ngelse heraf som regel ogs\u00e5 i deres evner til at forst\u00e5, hvordan arkivet skal bruges. (Dom\u00e6nespecialister h\u00f8rer dog ofte til i begge modtager-grupper.)</p> <p>Brugeren skal bruge produktet, som arkivet indeholder eller leverer. For brugeren er arkivet ofte adgangen til at komme i besiddelse af produktet, installere det og bruge det. Vejledninger og programmel-pakker er derfor noget, brugeren vil kigge efter, n\u00e5r de tilg\u00e5r arkivet. De er der f\u00f8rst og fremmest for at kunne l\u00f8se deres egne opgaver i forretningen bedre. For dem er programmellet bare en ekstra kommando eller grafisk brugergr\u00e6nseflade, som helst skal v\u00e6re let at anvende.</p> <p>Udvikleren skal kende til forretningen og brugerens behov og har til form\u00e5l at bringe sit kendskab til v\u00e6rkt\u00f8jer og software-principper sammen med de muligheder og begr\u00e6nsninger, som findes i den eksisterende IT-infrastruktur i forretningen, sammen for at opfylde disse behov.</p>"},{"location":"#fremtidssikrende-slutprodukter","title":"Fremtidssikrende slutprodukter","text":"<p>Slutprodukterne i arkivet har alts\u00e5 forskellige form\u00e5l, som g\u00f8r dem relevante p\u00e5 forskellige tidspunkter til forskellige modtagergrupper.</p> <p>De v\u00e6rkt\u00f8jer, man bruger til at bygge og videreudvikle koden, skal helst v\u00e6re de samme. Git-arkivet har derfor filer, der er relevante for \u00e9n, der skal tilf\u00f8je funktionalitet. Alt hvad der skal til for at kunne bygge (videre p\u00e5) eller vedligeholde projektet er udviklervendte.</p> <p>Bruger-modtagergruppen er derimod alt fra hovedmodtageren---d\u00e9n, der bestilte leverancen---eller andre udviklere, der skal bruge programmellets funktionalitet i deres egne projekter, enten via programmelets API eller som applikation, hvis dette er form\u00e5let med programmellet.</p> <p>Der kan v\u00e6re mange form\u00e5l med programmellet ud over de n\u00e6vnte, men med kravene inden for disse kategorier, er det prim\u00e6re form\u00e5l at vi har materiale i et arkiv, som g\u00f8r det muligt at levere det forventede, uden kendskab til andet end indholdet i arkivet. Alt, hvad der opfylder dette form\u00e5l vil generelt v\u00e6re et rimeligt fremtidssikret projekt.</p>"},{"location":"#kravenes-gyldighed-fra-begyndelse-til-slutprodukt","title":"Kravenes gyldighed fra begyndelse til slutprodukt","text":"<p>Det er i orden, at ikke alt er med fra starten, men det skal v\u00e6re tilf\u00e6ldet, at man kan komme videre og bidrage til projektet fra d\u00e9t stadium, det er i til et givet tidspunkt.</p> <p>Det er ikke form\u00e5let her at fort\u00e6lle, hvad der skal laves i hvilken r\u00e6kkef\u00f8lge. Det vil altid v\u00e6re kontekstafh\u00e6ngigt. Men hvor r\u00e6kkef\u00f8lgen til dels er ligemeget, s\u00e5 skal der som minimum v\u00e6re noget, man kan starte ud fra, som bruger eller udvikler, n\u00e5r man tilg\u00e5r arkivet.</p>"},{"location":"distribution/","title":"Kategori: Distribution","text":"<p>I denne kategori h\u00f8rer software, der har en offentlig snitflade og dermed brugere uden for vores organisation, som er afh\u00e6ngige af ikke bare kvalitet, men ogs\u00e5 tilg\u00e6ngelighed og driftsikkerhed.</p> <p>Sammen kravene til kategorierne Prototype og Produktion skal nedenst\u00e5ende v\u00e6re opfyldt for programmel kategoriseret som Distribution.</p>"},{"location":"distribution/#systemafhngigheder","title":"Systemafh\u00e6ngigheder","text":"<p>Systemafh\u00e6ngigheder er alt, hvad det p\u00e5g\u00e6ldende programmel er afh\u00e6ngigt af for at virke, og kan blandt andet best\u00e5 af f\u00f8lgende:</p> <ul> <li> <p>Forud-installerede programmer, der ikke kommer med programmellet, herunder     eksempelvis en Python-distribution til at k\u00f8re Python-kode.</p> </li> <li> <p>Styresystemer, programmellet kan k\u00f8re p\u00e5.</p> </li> <li> <p>Brugerens egne adgange til netv\u00e6rksressourcer som netv\u00e6rksdrev, servere     (lokale som eksterne) og Internettet.</p> </li> <li> <p>Separat fra adgange til netv\u00e6rk er systemadgange, der kr\u00e6ver     (eksplicitte) login-oplysninger for specifikke brugerkonti, som anvendes af     programmet.</p> </li> </ul> <p>B\u00e5de bruger og udvikler skal f\u00e5 et overblik over afh\u00e6ngigheder som disse, n\u00e5r de tilg\u00e5r dokumentationen i arkivet. Derfor:</p> <ul> <li> <p>Brug gerne diagrammer til illustration af teknisk infrastruktur, databaser     og andet, hvor forbindelserne mellem komponenterne kan blive klarere     derved.</p> </li> <li> <p>Brug gerne tabeller til konkrete informationer som servernavne/adresser og     andet, hvor prosatekst eller punktlister ikke rigtig g\u00f8r det nemt nok at     l\u00e6se og f\u00e5 overblik over informationerne.</p> </li> <li> <p>Overvej generelt, hvordan informationerne bedst kan pr\u00e6senteres, s\u00e5 de     skaber en klar forst\u00e5else af indholdet for l\u00e6seren.</p> </li> </ul>"},{"location":"distribution/#continuous-deliverydeployment-cd","title":"Continuous Delivery/Deployment (CD)","text":"<p>Continuous deployment og continuous delivery [begge forkortet CD] henviser til to processer, der begge kan v\u00e6re en del af \u00e9ns Continuous-Integration [CI] pipeline:</p> <ul> <li> <p>Continous deployment er den automatiske produktion og versionering af pakker     baseret p\u00e5 de enkelte commits, der kommer igennem \u00e9ns krav     (kvalitetssikring s\u00e5 som fejlfri testk\u00f8rsel) i CI-ops\u00e6tningen. Det betyder,     at der for hver arkiv-version, som virker, bliver produktet gjort klar     til brug.</p> </li> <li> <p>Continuous delivery er den automatiske ibrugtagning af nye     programmel-versioner, n\u00e5r de bliver tilg\u00e6ngelige p\u00e5 m\u00e5den beskrevet under     continuous deployment.</p> </li> </ul> <p>Som indikeret er continuous deployment og continuous delivery som regel processer, der s\u00e6ttes op i \u00e9ns continuous-integration pipeline.</p> <p>Ovenfor har er n\u00e6vnt brugen af \u00e9n eller flere workflow-filer, der kan l\u00e6ses af GitHub Actions, n\u00e5r kode\u00e6ndringer sendes til det centrale arkiv p\u00e5 GitHub.</p> <p>P\u00e5 kontoret DADs servere er CI-platformen Jenkins, hvor \u00e9ns CI-pipeline styres med skridt i en enkelt fil, der som standard skal hedde <code>Jenkinsfile</code>.</p> <p>Som eksempel p\u00e5 en applikation kan n\u00e6vnes Valdemar, der automatisk rulles ud p\u00e5 test-serveren (Continuous Delivery), men kun manuelt kan rulles p\u00e5 produktionsserveren. WEBPROJ har en tilsvarende ops\u00e6tning.</p>"},{"location":"distribution/#api-dokumentation","title":"API-dokumentation","text":"<p>Programmel kan anvendes af anden kode eller andre systemer p\u00e5 flere m\u00e5der. Snitfladen til programmellets funktionalitet fra eksterne programmer kaldes for Application-Programming Interface [API]. F\u00f8lgende scenarier er eksempler p\u00e5 API'er:</p> <ol> <li> <p>Er programmellet et bibliotek, der kan bruges som tredjepartsmodul i andre sammenh\u00e6nge, vil API her henvise til d\u00e9n del af bibliotekets funktionalitet, som har til form\u00e5l at eksponere funktionaliteten til brugeren.</p> </li> <li> <p>Programmel, der som selvst\u00e6ndigt programmet [en. applikation] udstiller eksempelvis en service, n\u00e5r programmet k\u00f8rer, har dermed ogs\u00e5 en API, som kan tilg\u00e5s p\u00e5 flere forskellige m\u00e5der og ikke n\u00f8dvendigvis med programmel skrevet i samme programmeringssprog som programmet selv.</p> </li> </ol> <p>Der skal v\u00e6re dokumentation af programmellets API med i resten af dokumentationen.</p> <p>Tilgange til API-dokumentation kan v\u00e6re f\u00f8lgende:</p> <ul> <li> <p>Automatisk produktion af dokumentation ud fra signaturer og docstrings i Python-kildekoden.</p> </li> <li> <p>Automatisk produktion og udstilling af konsum\u00e9rbar API-dokumentation ud     fra samme. Konsum\u00e9rbar vil her sige, at der kan produceres en service med     en interface, der i sig selv er en udstilling, hvor det udstillede er     noget, der definerer API'en for programmellets service.</p> </li> </ul>"},{"location":"produktion/","title":"Kategori: Produktion","text":"<p>Som n\u00e6vnt indeholder kategorien Produktion software, der aktivt bruges i forretningen.</p> <p>Ud over kravene under kategorien Prototype, skal f\u00f8lgende ogs\u00e5 v\u00e6re i med i leverancen.</p> <p>Her er alts\u00e5 tale om mere l\u00e6ngerevarende projekter, der dermed ogs\u00e5 kr\u00e6ver mere omtanke og fokus p\u00e5 vedligehold. L\u00e6ngerevarende kode-udvikling medf\u00f8rer som regel ogs\u00e5 flere implementeringer---ikke n\u00f8dvendigvis mere kode. Her er ogs\u00e5 tale om noget, der i lang tid skal underst\u00f8tte forretningens behov p\u00e5 et niveau, der i h\u00f8j grad underst\u00f8tter kvaliteten af d\u00e9t arbejde, der udf\u00f8res af det udviklede programmel.</p> <p>Derfor er der behov for flere v\u00e6rkt\u00f8jer til udviklere, som hj\u00e6lper udvikleren med at sikre kvaliteten af koden, b\u00e5de designm\u00e6ssigt, men ogs\u00e5 funktionsm\u00e6ssigt.</p> <p>Med yderligere dokumentation, hj\u00e6lper man ogs\u00e5 andre udviklere p\u00e5 projektet til at bibeholde vedtagne standarder og konventioner, s\u00e5 vel som at give det fulde overblik over alt, hvad der er med i arkivet.</p>"},{"location":"produktion/#vrktj-til-udviklere","title":"V\u00e6rkt\u00f8j til udviklere","text":"<p>De v\u00e6rkt\u00f8j til udviklere har til form\u00e5l at instruere andre, der skal bidrage til og vedligeholde arkivets indhold, herunder kildekode, test-kode og dokumentation.</p>"},{"location":"produktion/#test-funktionalitet","title":"Test-funktionalitet","text":"<p>Der skal s\u00e5 vidt muligt v\u00e6re test-funktionalitet [en. test suite]---afsondret fra programmellets kode---af alle funktioner i koden.</p> <p>En test-suite er en organiseret samling af kode, der tester funktionaliteten af koden set fra en brugers synsvinkel.</p> <p>Test-ops\u00e6tningen kan v\u00e6re mere eller mindre kompliceret, fra manuel k\u00f8rsel af test-funktionaliteten til ops\u00e6tninger, der kan s\u00e6tte test-milj\u00f8er op, der svarer til de milj\u00f8er, hvori programmet kan forventes af skulle kunne k\u00f8re.</p>"},{"location":"produktion/#continuous-integration","title":"Continuous Integration","text":"<p>N\u00e5r \u00e6ndringer skubbes til den centrale placering [GitHub] af arkivet, skal koden automatisk hentes og relevant test-funktionalitet afvikles.</p> <p>Ops\u00e6tningen bruges til at lade udvikleren vide, om koden virker som forventet ved kilden og ikke bare i udviklerens eget milj\u00f8. Dette kaldes continuous integration [CI].</p> <p>GitHub har et integreret CI-v\u00e6rkt\u00f8j kaldet GitHub Actions. Actions kan k\u00f8re, n\u00e5r en bruger laver \u00e6ndringer i arkivet eller p\u00e5 fastlagte tidspunkter. N\u00e5r betingelserne er opfyldt, starter platformen et bruger-defineret workflow op p\u00e5 en virtuel maskine p\u00e5 platformens servere.</p> <p>Man kan tilf\u00f8je workflows gennem platformens web-brugergr\u00e6nseflade, hvorved GitHub opretter f\u00f8lgende mappestruktur i roden af arkivet: <code>.github/workflows/</code>. <code>workflows</code>-mappen indeholder s\u00e5 de workflows, man har oprettet. Workflows er bare <code>.yaml</code>-dokumenter med en bestemt struktur og indhold. Man kan s\u00e5ledes oprette workflows bare ved at tilf\u00f8je workflow-filer i denne mappe, og GitHub vil selv opfange dem og k\u00f8re dem efter forskrifterne i hver enkelt workflow-fil.</p>"},{"location":"produktion/#teknisk-dokumentation","title":"Teknisk dokumentation","text":"<p>Teknisk dokumentation er en bred betegnelse for en r\u00e6kke forskellige ting, som prim\u00e6rt er henvendt til udviklere, men ogs\u00e5 til drifts-ansvarlige, eller folk, der har brug for at vide, hvordan programmellet indg\u00e5r i et st\u00f8rre systemlandskab.</p> <p>Der kan ogs\u00e5 v\u00e6re behov for at beskrive programmellet arkitektur i sig selv, snitflader mod andre systemer; begrundelser herfor og tegninger/illustrationer heraf.</p> <p>Det n\u00f8dvendige detalje-niveau afh\u00e6nger til dels af form\u00e5let med leverancen. Det er dog n\u00f8dvendigt at medtage s\u00e5 meget af det som muligt, i st\u00f8rre eller mindre omfang, s\u00e5 vi f\u00e5r en fast ramme, hvorunder vi beskriver tingene.</p>"},{"location":"produktion/#semantisk-versionering","title":"Semantisk versionering","text":"<p>Kodeudgivelserne skal v\u00e6re styret og bruge konventionen for semantisk versionering til nummerering af programmeludgivelserne.</p>"},{"location":"produktion/#vedligeholdelsesspor","title":"Vedligeholdelsesspor","text":"<p>Der skal v\u00e6re vedligeholdelsesspor [en. maintainance branches] i Git-arkivet ved siden af hovedsporet<sup>1</sup>, som indeholder seneste minor version navngivet efter deres minor-version, eksempelvis <code>1.3.0</code>, og som modtager rettelser [en. patches] fra den l\u00f8bende udvikling. Hver patch-version h\u00f8rer til i den tilsvarende minor-versions vedligeholdelsesspor og f\u00e5r et Git-tag med den p\u00e5g\u00e6ldende patch-version, eksempelvis <code>1.3.2</code>.</p> <p>Illustrationen nedenfor viser hovedsporet og to maintainance branches, der hver is\u00e6r modtager rettelser [p\u00e5 engelsk kaldet backporting] fra hovedsporet.</p> <pre><code>    o---o------o---o---o---o---o---o---o---o---o---o---o  main  &lt;-- Hovedspor\n         \\      \\       \\       \\       \\\n          \\      \\       o-------o-------o---o  1.4.0           &lt;-- Vedligeholdelsesspor for minor version 1.4.0+\n           \\      \\      |       |       |\n            \\      \\   1.4.0   1.4.1   1.4.2                    &lt;-- M\u00e6rkater [en. tags] til de enkelte patch-versioner\n             \\      \\\n              o------o---o  1.3.0                               &lt;-- Vedligeholdelsesspor for minor version 1.3.0+\n              |      |\n            1.3.0  1.3.1                                        &lt;-- Git tags til de enkelte patch-versioner\n</code></pre> <p>Disse rettelser er, som den semantiske version fort\u00e6ller, kun sm\u00e5tilpasninger og korrektioner af fejl [en. bugs]. Backport'ede rettelser \u00e6ndrer alts\u00e5 ikke v\u00e6sentligt p\u00e5 programmellets funktionalitet, men er er bagud-kompatible.</p> <p>Er man en bruger af en specifik minor-version af programmellet, og foreg\u00e5r installationen ved at hente og installere direkte fra GitHub(eller andetsteds), s\u00e5 kan brugeren med fordel tilf\u00f8je vedligeholdelsessporet til de Git-branches, der automatisk bliver hentet, n\u00e5r man skriver <code>git fetch</code> eller <code>git pull</code> i sin terminal. P\u00e5 denne m\u00e5de slipper man for at skulle manuelt udv\u00e6lge seneste git-revision og dermed skifte til en tilstand, der i Git-terminologi kaldes for 'detached HEAD'.</p> Eksempel  Brugeren \u00f8nsker at hente seneste opdateringer ned p\u00e5 vedligeholdelsessporet `1.4`. Programmellet installeres i forvejen fra Git-arivet p\u00e5 GitHub.  Kommandoerne `git fetch` og `git checkout` kan bruges p\u00e5 f\u00f8lgende m\u00e5de, hvis [kriterierne er opfyldt][git-scm-book_tracking-branches]:  <pre><code>git fetch\n# remote: Enumerating objects: 549, done.\n# remote: Counting objects: 100% (507/507), done.\n# remote: Compressing objects: 100% (272/272), done.\n# remote: Total 549 (delta 302), reused 394 (delta 224), pack-reused 42 eceiving objects:  97% (533/549), 1.20 MiB\n# Receiving objects: 100% (549/549), 1.49 MiB | 1.23 MiB/s, done.\n# Resolving deltas: 100% (309/309), completed with 42 local objects.\n# From https://github.com/SDFIdk/FIRE\n#    4fca6e3..d0a5712  1.3        -&gt; origin/1.3\n#  * [new branch]      1.4        -&gt; origin/1.4\n#  + fe12a13...afed990 gh-pages   -&gt; origin/gh-pages  (forced update)\n#    8a93e18..5167a26  master     -&gt; origin/master\n#  * [new tag]         fire-1.4.0 -&gt; fire-1.4.0\ngit checkout 1.4\n# Previous HEAD position was 4fca6e3 Merge pull request #531 from SDFIdk/backport-530-to-1.3\n# Switched to a new branch '1.4'\n# Branch '1.4' set up to track remote branch '1.4' from 'origin'.\n</code></pre>  De nederste linjer i terminalens output fort\u00e6ller, at vi med den sidste kommando nu har oprettet et nyt spor (gren eller *branch* om man vil), og at det samtidig er sat op til at f\u00f8lge det tilsvarende vedligeholdelsesspor(`1.4`) i kilde-arkivet---i Git-terminologi en *remote*---, der med standard-indstillingerne her er kaldet `origin`.  D\u00e9t betyder, at vedligeholdelsessporet `1.4` fremover bliver opdateret lokalt,   n\u00e5r brugeren skriver `git pull`.  [git-scm-book_tracking-branches]: https://git-scm.com/book/en/v2/Git-Branching-Remote-Branches#_tracking_branches   <p>Automatisk sammenfletning af hovedspor-revisioner p\u00e5 vedligeholdelsesspor med GitHub Actions</p> <p>Som illustreret ovenfor, er det ikke ualmindeligt, at en v\u00e6sentlig andel af revisionerne foretaget p\u00e5 arkivets hovedspor, skal overf\u00f8res/sammenflettes [en. merge] p\u00e5 et vedligeholdelsesspor.</p> <p>Ved hj\u00e6lp af GitHub Actions kan man med et workflow automatisere sammenfletningen af de revisioner, man \u00f8nsker at backport'e til et givet vedligeholdelsesspor.</p> <p>I Fikspunktregistret (FIRE) anvender vi dette workflow, som i dokumentationen holder \u00f8je med, hvilke revisioner, man \u00f8nsker at backport'e til hvilke vedligeholdelsesspor.</p> <p>1: Standard-navnet i nye Git-arkiver var tidligere <code>master</code>, men er skiftet til <code>main</code>. Som med alle grene i versions-historikken er det muligt at omd\u00f8be den. Det lader dog ikke til at v\u00e6re normalt, og standard-navnet er alment kendt og derfor en god konvention for navnet til arkivets hovedspor.</p>"},{"location":"prototype/","title":"Kategori: Prototype","text":"<p>Som n\u00e6vnt ovenfor, er eksempler p\u00e5 programmel i kategorien Prototype blandt andet eksperimenter---herunder prototyper---, midlertidige opgaver og diverse sm\u00e5-scripts.</p>"},{"location":"prototype/#versionsstyring","title":"Versionsstyring","text":"<ul> <li>Alle filer relateret til koden (herunder test-kode, dokumentation,     konfigurationsfiler og andet) er samlet og versionsstyret for at sikre, at     filerne h\u00e6nger sammen med hinanden p\u00e5 tv\u00e6rs af arkiv-versionerne.</li> </ul> <p>Bem\u00e6rk, at der er forskel p\u00e5 en given version af arkivets indhold (i Git er   det en SHA1-hash, der udg\u00f8r et bidrags [en. commit] version) og den   semantiske version af d\u00e9t stykke programmel, der ligger i arkivet   (eksempelvis version <code>1.2.3</code> for en pakke). Versionering af kodeudgivelser er   ikke et krav i denne kategori, men se mere om dette under Produktion.</p>"},{"location":"prototype/#git-arkivet","title":"Git-arkivet","text":"<p>Et Git-arkiv har altid en <code>.git</code>-mappe som indeholder versionshistorikken. Ud over denne, er der andre muligheder for at konfigurere versionsstyringen:</p> <ul> <li> <p><code>.gitignore</code>-filen er vigtig af praktiske og sikkerhedsm\u00e6ssige grunde.</p> <ul> <li>Arbejdet med koden og andre kildefiler producerer typisk en r\u00e6kke     sideprodukter s\u00e5 som Python-bytekode, test-cache-filer og andet, som     altid kan produceres igen ud fra kildekoden. Filer som disse er derfor     ikke n\u00f8dvendige at versionsstyre.</li> <li>Andre filer kan v\u00e6re udviklerens egne konfigurationsfiler, som ikke bare     er irrelevante, men ogs\u00e5 kan v\u00e6re sikekrhedsm\u00e6ssigt uforsvarlige at     komme til at knytte til arkivet: det kan v\u00e6re konfiurationsfiler med     login-oplysninger.</li> </ul> </li> <li> <p><code>.gitattributes</code></p> <ul> <li>Det kan v\u00e6re n\u00f8dvendigt at definere nogle s\u00e6rlige atributter for nogle     filtyper, s\u00e5 man kan lade Git h\u00e5ndtere dem \u00e9ns p\u00e5 tv\u00e6rs af arkivets     bidragydere. Det kan v\u00e6re markering af s\u00e6rlige filtyper som bin\u00e6re.     Eller det kan v\u00e6re \u00e9nsretning af linieskift-karakterer p\u00e5 tv\u00e6rs af     operativsystemer.</li> </ul> </li> </ul> <p>Bem\u00e6rk</p> <ul> <li>Din lokale og personlige <code>.gitconfig</code>-fil b\u00f8r s\u00e6ttes op, inden du laver      \u00e6ndringer.</li> </ul>"},{"location":"prototype/#git-arkiv-pa-github","title":"Git-arkiv p\u00e5 GitHub","text":"<p>GitHub er en Microsoft-ejet, online platform, som fungerer som en central placering af vores Git-arkiver. Platformen yder flere ekstra ting, som g\u00f8r det lettere at administrere de enkelte arkiver, herunder at sammenflette versioner, der kommer fra de enkelte bidragsydere til arkiverne.</p> <ul> <li>Git-arkivets centrale version skal indtil videre ligge p\u00e5 GitHub.</li> <li>Start med at lave arkivet privat.</li> </ul>"},{"location":"prototype/#programmel-kildekode","title":"Programmel-kildekode","text":"<p>Kildekoden udg\u00f8r programmellets egentlige funktionalitet. Programmellets funktionalitet er forskellig fra alle de filer, mekanismer og andet i arkivet, som bruges til at arbejde med koden [installationsprogrammer, konfigurationsfiler, etc.]. Derfor placeres kildekoden i en separat mappe adskilt fra andet, der ikke er n\u00f8dvendigt, n\u00e5r programmellet er installeret.</p> <p>Mere konkret: er programmellet en samling forbundne scripts og moduler, s\u00e5 l\u00e6g dem i en mappe i arkivets rod kaldet <code>scripts</code>. Er det en Python-pakke, s\u00e5 l\u00e6g pakken i en mappe med navnet <code>src</code>.</p>"},{"location":"prototype/#konfigurationsfiler","title":"Konfigurationsfiler","text":"<p>Konfigurationsfiler kan d\u00e6kke flere form\u00e5l:</p> <ul> <li>Milj\u00f8-ops\u00e6tning for udviklere eller brugere af koden.<ul> <li>Eksempel: <code>environment.yml</code> til styring og installation af virtuelle     Python milj\u00f8er med Mamba Forge-Python-distributionen.</li> <li>Eksempel: Indstillinger, der er n\u00f8dvendige for, at koden kan udf\u00f8re sine     opgaver, eksempel login-oplysninger til en database eller andet. Da     disse filer kan indeholde f\u00f8lsomme oplysninger, vil indstillingerne     typisk v\u00e6re specielt-navngivne filer, der indikerer, at de er eksempler     p\u00e5 en ops\u00e6tning, man som bruger eller udvikler kan have.</li> </ul> </li> </ul>"},{"location":"prototype/#dokumentation","title":"Dokumentation","text":""},{"location":"prototype/#readme-fil","title":"README-fil","text":"<p>I roden af arkivet skal der v\u00e6re en README-fil [kald den <code>README.md</code>, og lad v\u00e6re med at overs\u00e6tte filnavnet til dansk]. Dokumentet skal derfor indeholde oplysninger om projektet, vejledninger, hj\u00e6lp til at installere og komme igang, samt kontakte arkivets nuv\u00e6rende udviklere.</p> <p>P\u00e5 GitHub er dette dokument den f\u00f8rste og dermed vigtigste indgang til projektet, da filen automatisk bliver vist, n\u00e5r man tilg\u00e5r arkivet. S\u00f8rg derfor for som minimum at have en README-fil, og lad den have et basalt indhold.</p> <p>Inspiration til indholdet af README-filen kan eventuelt hentes i f\u00f8lgende README-checkliste (tilh\u00f8rende foredrag).</p>"},{"location":"prototype/#licens","title":"Licens","text":"<p>Licensen er en juridisk vejledning i, hvordan man m\u00e5 bruge programmellet, samt hvilke rettigheder, man har som bruger af det.</p> <ul> <li> <p>Arkivet indeholder en beskrivelse af licens-betingelserne.</p> </li> <li> <p>Anvend konventionen med en fil <code>LICENSE</code> i roden af Git-arkivet.</p> <ul> <li>Eksempel</li> </ul> </li> <li> <p>Valg af licens: Som udgangspunkt anvender vi MIT-licensen, men overvej     behovet.</p> <ul> <li>L\u00e6s eventuelt her om, hvorfor det er vigtigt at have valgt en licens,     frem for ingenting: Copy-left and Copy-right -- what you need to know</li> </ul> </li> </ul>"},{"location":"prototype/#brugervejledning","title":"Brugervejledning","text":"<ul> <li> <p>Med tanke p\u00e5 modtagerne, skal der v\u00e6re en vejledning til brugeren, der skal     anvende programmellet.</p> </li> <li> <p>Brugeren skal vide, hvilket problem programmellet l\u00f8ser, og hvilken v\u00e6rdi     det skaber. Dette kan v\u00e6re givet, men det er godt at have med.</p> </li> <li> <p>S\u00e5 skal brugeren vide, hvordan man kommer igang med at bruge programmellet.</p> </li> <li> <p>Og s\u00e5 er det vigtigt, at brugeren bliver informeret om, hvorhen eller til     hvem de kan g\u00e5 for at f\u00e5 hj\u00e6lp eller bidrage med feedback.</p> <ul> <li>Brugere (og udviklere) skal vide, hvordan man opretter sager, hvis man     oplever fejl i programmellet eller har \u00e6ndrings\u00f8nsker. Samtidig l\u00e6gger     vi med al koden p\u00e5 GitHub op til, at man anvender platformen til at     bidrage med \u00e6ndringer, hvis man selv er i stand til at bidrage til     projektet, om det s\u00e5 er kode eller dokumentation eller noget tredje.</li> </ul> </li> </ul>"},{"location":"prototype/#installationsvejledning","title":"Installationsvejledning","text":"<ul> <li> <p>Med tanke p\u00e5 modtagerne, skal der v\u00e6re relevante installationsvejledninger,     som er relevante i forbindelse med udvikling og brug af programmellet.</p> </li> <li> <p>Udviklere skal vide, hvad de skal installere for at kunne bygge videre p\u00e5     kode og dokumentation, herunder lokal testops\u00e6tning i deres egne milj\u00f8er.</p> <ul> <li>Man beh\u00f8ver ikke n\u00f8dvendigvis en vejledning installation af teamets     g\u00e6ngse v\u00e6rkt\u00f8jer. Men t\u00e6nkt i relevans her og overvej, igen, om en ny     udvikler/kollega kan klare sig selv uden den konkrete vejledning.</li> </ul> </li> <li> <p>Brugeren skal i arkivet kunne l\u00e6se sig til, hvordan programmellet     installeres, s\u00e5 det kan tages i brug som et f\u00e6rdigt produkt.</p> </li> </ul>"},{"location":"prototype/#vedligeholdelsesvejledning","title":"Vedligeholdelsesvejledning","text":"<p>Som en del af fremtidssikringen, skal der i denne kategori som minimum v\u00e6re en beskrivelse af, hvordan projektet fortsat kan vedligeholdes til fremtidigt brug.</p> <p>Her b\u00f8r man formulere alle relevante oplysninger, som er n\u00f8dvendige for, at man kan arbejde videre med koden fremover.Ud over de andre vejledninger, kan der her v\u00e6re behov for at n\u00e6vne andre kontaktpersoner eller samarbejdspartnere.</p> <p>Man kan ogs\u00e5 v\u00e6lge at tilf\u00f8je denne vejledning en beskrivelse af processen med at modtage og h\u00e5ndtere input fra brugere af programmellet.</p>"}]}